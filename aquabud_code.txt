#include <OneWire.h>
#include <DallasTemperature.h>
#include <WiFiManager.h>
#include <ESP32Servo.h>
#include <WebServer.h>

#define relayPin 27
#define echopin 25
#define trigping 26
#define servoPin 13
#define ONE_WIRE_BUS 0

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

float temperatureC;
float temperatureF;
int distance;
Servo myServo;

WebServer server(80);

void distanceMeasure() {
  digitalWrite(trigping, LOW);
  delayMicroseconds(2);
  digitalWrite(trigping, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigping, LOW);
  long duration = pulseIn(echopin, HIGH);
  distance = duration * 0.034 / 2;
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
}

void stopServo() {
  myServo.write(90);
}

void spinForSeconds(int seconds, bool clockwise) {
  int angle = clockwise ? 0 : 180;
  myServo.write(angle);
  delay(seconds * 1000);
  stopServo();
}

void finalFunc() {
  distanceMeasure();

  // Check temperature and distance conditions
  if (temperatureC >= 25 || temperatureF >= 77 || distance >= 7.5) {
    digitalWrite(relayPin, HIGH);  // Relay ON  
    Serial.println("Relay ON");
  } else {
    digitalWrite(relayPin, LOW);   // Relay OFF
    Serial.println("Relay OFF");
  }
}

String SendHTML(float TemperatureCstat, float TemperatureFstat, int distanceStat) {
  String ptr = "<!DOCTYPE html> <html>\n";
  ptr += "<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n";
  ptr += "<title>AquaBud</title>\n";
  ptr += "<style> body{background-image: url(\"https://i.pinimg.com/originals/66/19/80/661980c1f6ed5448d6825d5920048bbb.gif\"); background-position: center center; background-size: cover; background-repeat: no-repeat; background-attachment: fixed;</style>";
  ptr += "<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.7.2/css/all.css\" integrity=\"sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr\" crossorigin=\"anonymous\">\n";
  ptr += "<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\n";
  ptr += "body{margin-top: 50px;} h1 {color: #444444;margin: 50px auto 30px;}\n";
  ptr += "p {font-size: 24px;color: #444444;margin-bottom: 10px;}\n";
  ptr += ".navbar { overflow: hidden; background-color: #333; }\n";
  ptr += ".navbar a { float: left; font-size: 16px; color: white; text-align: center; padding: 14px 16px; text-decoration: none; }\n";
  ptr += ".navbar a:hover { background-color: #ddd; color: black; }\n";
  ptr += ".main { padding: 16px; }\n";
  ptr += "</style>\n";
  ptr += "<script>\n";
  ptr += "function updateData() {\n";
  ptr += "  var xhttpC = new XMLHttpRequest();\n";
 

  ptr += "  xhttpC.onreadystatechange = function() {\n";
  ptr += "    if (this.readyState == 4 && this.status == 200) {\n";
  ptr += "      document.getElementById(\"temperatureC\").innerHTML = this.responseText;\n";
  ptr += "    }\n";
  ptr += "  };\n";
  ptr += "  xhttpC.open(\"GET\", \"/temperatureC\", true);\n";
  ptr += "  xhttpC.send();\n";
  ptr += "  var xhttpF = new XMLHttpRequest();\n";
  ptr += "  xhttpF.onreadystatechange = function() {\n";
  ptr += "    if (this.readyState == 4 && this.status == 200) {\n";
  ptr += "      document.getElementById(\"temperatureF\").innerHTML = this.responseText;\n";
  ptr += "    }\n";
  ptr += "  };\n";
  ptr += "  xhttpF.open(\"GET\", \"/temperatureF\", true);\n";
  ptr += "  xhttpF.send();\n";
  ptr += "  var xhttpD = new XMLHttpRequest();\n";
  ptr += "  xhttpD.onreadystatechange = function() {\n";
  ptr += "    if (this.readyState == 4 && this.status == 200) {\n";
  ptr += "      var distanceValue = parseInt(this.responseText);\n";
  ptr += "      var reversedDistance = Math.max(0, 100 - distanceValue);\n";
  ptr += "      document.getElementById(\"distance\").innerHTML = reversedDistance + \" %\";\n";
  ptr += "    }\n";
  ptr += "  };\n";
  ptr += "  xhttpD.open(\"GET\", \"/distance\", true);\n";
  ptr += "  xhttpD.send();\n";
  ptr += "}\n";
  ptr += "function updateRelayStatus() {\n";
  ptr += "  var xhttpR = new XMLHttpRequest();\n";
  ptr += "  xhttpR.onreadystatechange = function() {\n";
  ptr += "    if (this.readyState == 4 && this.status == 200) {\n";
  ptr += "      document.getElementById(\"relayStatus\").innerHTML = this.responseText;\n";
  ptr += "    }\n";
  ptr += "  };\n";
  ptr += "  xhttpR.open(\"GET\", \"/relayStatus\", true);\n";
  ptr += "  xhttpR.send();\n";
  ptr += "}\n";
  ptr += "function refreshRelayStatus() {\n";
  ptr += "  updateRelayStatus();\n";
  ptr += "  controlRelay();\n";
  ptr += "}\n";
  ptr += "function controlRelay() {\n";
  ptr += "  var xhttpC = new XMLHttpRequest();\n";
  ptr += "  xhttpC.onreadystatechange = function() {\n";
  ptr += "    if (this.readyState == 4 && this.status == 200) {\n";
  ptr += "      // Optional: You can handle the response if needed\n";
  ptr += "    }\n";
  ptr += "  };\n";
  ptr += "  xhttpC.open(\"GET\", \"/controlRelay\", true);\n";
  ptr += "  xhttpC.send();\n";
  ptr += "}\n";
  ptr += "setInterval(function() {\n";
  ptr += "  updateData();\n";
  ptr += "  updateRelayStatus();\n";
  ptr += "}, 2000);\n";
  
  ptr += "</script>\n";
  ptr += "</head>\n";
  ptr += "<body>\n";
  ptr += "<div class=\"navbar\">\n";
  ptr += "  <a href=\"#temperatureC\">Temp Celsius</a>\n";
  ptr += "  <a href=\"#temperatureF\">Temp Fahrenheit</a>\n";
  ptr += "  <a href=\"#distance\">Water Level</a>\n";
  ptr += "  <a href=\"#relayStatus\">Pump Status</a>\n";
  ptr += "  <a href=\"#controlFishFeeder\">Fish Feeder</a>\n";
  ptr += "</div>\n";
  ptr += "<div class=\"main\">\n";

  ptr += "<div id=\"webpage\">\n";
  ptr += "<h1>AquaBud</h1>\n";
  ptr += "<p>";
  ptr += "<i class='fas fa-thermometer-half' style='color:#059e8a;'></i> ";
  ptr += "Temperature Celsius: ";
  ptr += "<span id=\"temperatureC\"></span>";
  ptr += " °C</p> <br>";
  ptr += "<p>";
  ptr += "<i class='fas fa-thermometer-half' style='color:#059e8a;'></i> ";
  ptr += "Temperature Fahrenheit: ";
  ptr += "<span id=\"temperatureF\"></span>";
  ptr += " °F</p> <br>";
  ptr += "<p>Water Pump: <span id=\"relayStatus\"></span> <button onclick=\"refreshRelayStatus()\">Refresh</button></p> <br>";
  ptr += "<p>Water Tank Level: <span id=\"distance\"></span></p>";
  ptr += "</div>\n";


  ptr += "<div><p>Control FishFeeder:</p>";
  ptr += "<span id=\"controlFishFeeder\"></span>";
  ptr += "<style> table{ color: darkred; border-collapse: separate; border-width: 3px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(220, 30, 100);  border-right-color: rgb(220, 30, 100);   border-bottom-color: rgb(220, 30, 100);  border-left-color: rgb(220, 30, 100);} </style>";
  ptr += "<style> table td{ color: darkred; border-collapse: separate; border-width: 3px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(220, 30, 100);  border-right-color: rgb(220, 30, 100);   border-bottom-color: rgb(220, 30, 100);  border-left-color: rgb(220, 30, 100);} </style>";
  ptr += "<style> table th{ color: darkred; border-collapse: separate; border-width: 3px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(220, 30, 100);  border-right-color: rgb(220, 30, 100);   border-bottom-color: rgb(220, 30, 100);  border-left-color: rgb(220, 30, 100);} </style>";
  ptr += "<style> table td{ height: 80px; width: 160px; text-align: center; vertical-align: middle;} </style>";

  ptr += "<center><table><tr><th>Number of Fish</th></center>";
  ptr += "<center><th>Fish Food Quantity(grams)</th></center>";
  ptr += "<center><th>Device Working Time(seconds)</th></tr></center>";
  ptr += "<center><tr><th>3</th></center>";

  ptr += "<center><td><a href=\"/on1\"><button style=\"display:inline-block; background-color:rgb(220,30,100);color:white;width:60px;height:60px;border:none; border-radius:5px;font-size:12px;\">5.3 grams</button></a></td></center>";
  ptr += "<center><td>1</td></tr></center>";
  ptr += "<center><tr><th>5</th></center>";
  ptr += "<center><td><a href=\"/on2\"><button style=\"display:inline-block; background-color:rgb(220,30,100);color:white;width:60px;height:60px;border:none; border-radius:5px;font-size:12px;\">8.9 grams</button></a></td></center>";
  ptr += "<center><td>2</td></tr></center>";
  ptr += "<center><tr><th>7</th></center>";
  ptr += "<center><td><a href=\"/on3\"><button style=\"display:inline-block; background-color:rgb(220,30,100);color:white;width:60px;height:60px;border:none; border-radius:5px;font-size:12px;\">12.5 grams</button></a></td></center>";
  ptr += "<center><td>3</td></tr></center>";
  ptr += "<center><tr><th>9</th></center>";
  ptr += "<center><td><a href=\"/on4\"><button style=\"display:inline-block; background-color:rgb(220,30,100);color:white;width:60px;height:60px;border:none; border-radius:5px;font-size:12px;\">16 grams</button></a></td></center>";
  ptr += "<center><td>4</td></tr></center>";
  ptr += "</div>";

  ptr += "</table></div>\n";
  ptr += "</body>\n";
  ptr += "</html>";

  return ptr;
}

void handleControlRelay() {
  if (digitalRead(relayPin) == HIGH) {
    digitalWrite(relayPin, LOW);   // Relay OFF
  } else {
    digitalWrite(relayPin, HIGH);  // Relay ON
  }
  server.send(200, "text/plain", (digitalRead(relayPin) == HIGH) ? "ON" : "OFF");
}

void handleRoot() {
  sensors.requestTemperatures();
  temperatureC = sensors.getTempCByIndex(0);
  temperatureF = sensors.getTempFByIndex(0);
  finalFunc();

  String html = SendHTML(temperatureC, temperatureF, distance);
  server.send(200, "text/html", html);
}

void handleRotate(String seconds) {
  int duration = seconds.toInt();
  spinForSeconds(duration, true);
  stopServo();
  delay(1000);

  sensors.requestTemperatures();
  temperatureC = sensors.getTempCByIndex(0);
  temperatureF = sensors.getTempFByIndex(0);
  finalFunc();

  String html = SendHTML(temperatureC, temperatureF, distance);
  server.send(200, "text/html", html);
}

void handleTemperatureC() {
  sensors.requestTemperatures();
  temperatureC = sensors.getTempCByIndex(0);
  server.send(200, "text/plain", String(temperatureC));
}

void handleTemperatureF() {
  sensors.requestTemperatures();
  temperatureF = sensors.getTempFByIndex(0);
  server.send(200, "text/plain", String(temperatureF));
}

void handleDistance() {
  distanceMeasure();
  server.send(200, "text/plain", String(distance));
}

void handleRelayStatus() {
  server.send(200, "text/plain", (digitalRead(relayPin) == HIGH) ? "ON" : "OFF");
}

void setup() {
  Serial.begin(115200);

  // Configure WiFi using WiFiManager
  WiFiManager wifiManager;

  // Uncomment the line below if you want to reset the saved credentials
  wifiManager.resetSettings();

  // Set config portal timeout to 5 minutes
  wifiManager.setConfigPortalTimeout(300);

  // Custom parameters to be configured
  WiFiManagerParameter custom_ssid("ssid", "SSID", "Your SSID", 40);
  WiFiManagerParameter custom_password("password", "Password", "Your PASSWORD", 40);

  // Add parameters
  wifiManager.addParameter(&custom_ssid);
  wifiManager.addParameter(&custom_password);

  // Check if there are saved WiFi credentials
  if (!wifiManager.autoConnect("AutoConnectAP")) {
    Serial.println("Failed to connect, we should reset and see if it connects");
    delay(3000);
    ESP.restart();
    delay(5000);
  }

  // Set ESP32 hostname
  WiFi.hostname("AquaBud");

  myServo.setPeriodHertz(50);
  myServo.attach(servoPin, 1000, 2000);

  pinMode(relayPin, OUTPUT);
  pinMode(trigping, OUTPUT);
  pinMode(echopin, INPUT);

  sensors.begin();

  server.on("/", HTTP_GET, handleRoot);
  server.on("/on1", HTTP_GET, []() { handleRotate("1"); });
  server.on("/on2", HTTP_GET, []() { handleRotate("2"); });
  server.on("/on3", HTTP_GET, []() { handleRotate("3"); });
  server.on("/on4", HTTP_GET, []() { handleRotate("4"); });
  server.on("/temperatureC", HTTP_GET, handleTemperatureC);
  server.on("/temperatureF", HTTP_GET, handleTemperatureF);
  server.on("/distance", HTTP_GET, handleDistance);
  server.on("/relayStatus", HTTP_GET, handleRelayStatus);
  server.on("/controlRelay", HTTP_GET, handleControlRelay);  // Add this line

  server.begin();

  Serial.println("Server started");
}

void loop() {
  server.handleClient();
}
